#!/bin/bash

CMD=${0##*/}
DIR=${0%/*}

set -e

. $DIR/COMMON

#
# Useful for checking for test errors
# 
# grep -E 'NEW_LOG|SPLICE_TEST_ERROR|SPLICE_TEST' /src/tools/splice9/testing/SPLICE_LOG 
#

############################################################################
#
# Tests
#

declare -a major_tests=(TestAllLayouts TestAllFileSelect)

declare -a sub_tests=(
    TestAllLayouts
    'TestAllFileSelect Comp'
    'TestAllFileSelect Loup'
    'TestAllFileSelect Path'
    'TestAllFileSelect Grid0'
    'TestAllFileSelect Grid1'
)

# TODO: option to select initialization of splice_config? part of which test?
# TODO: option for which vimrc?

############################################################################
#
# Options processing
#

usage() {
    echo "$CMD [-r] [--wait] [-1] [--test=n]*"
    echo "    -r           run automated tests, otherwise start splice"
    echo "    --wait       don't exit splice after running each test"

    echo "    --test=n     add this test to tests to run"
    local -i i=0
    while ((i < ${#sub_tests[@]}))
    do
        echo "                     $i - ${sub_tests[i]}"
        ((i += 1))
    done

    echo "    --gvim=path  use specified vim to run the tests"
    
    exit 1
}

declare TEMP
TEMP=$(getopt -o "rh" --long 'wait,test:,gvim:' -n "$CMD" -- "$@")
if [[ $? -ne 0 ]]; then usage > /dev/stderr; fi
eval set -- "$TEMP"
unset TEMP

# The tests that will be run
declare -a run_tests

# empty means exit splice/vim after running test.
export SPLICE_WAIT_AFTER_TEST=

GVIM_CMD=gvim

# when rflag true run some tests, otherwise just start up splice.
typeset -i rflag

AddTest() {
    local -i i=$1
    run_tests+=("${sub_tests[i]}")
    rflag=1
}

while true
do
  case "$1" in
    -r) rflag=1;                               shift   ;;
    --wait) SPLICE_WAIT_AFTER_TEST=yes;        shift   ;;
    --test) AddTest $2;                        shift 2 ;;
    --gvim) GVIM_CMD=$2;                       shift 2 ;;
    -h) usage                                          ;;
    --) shift
        break
        ;;
     *) echo Internal Error "'$1'"; exit 1             ;;
  esac
done

# If no specific tests, then by default run the major tests.
if ((${#run_tests[@]} == 0))
then
    run_tests=("${major_tests[@]}")
fi

while ((i < ${#run_tests[@]}))
do
    tests_string="$tests_string \"${run_tests[i]}\""
    ((i += 1))
done

echo Running tests: $tests_string

############################################################################
#
# Main
#

export SPLICE_TEST_NAME=

Main() {
    > $SPLICE_LOG

    if ((!rflag))
    then
        RunSplice
        return
    fi

    # Run one of more tests

    local test
    for test in "${run_tests[@]}"
    do
        SPLICE_TEST_NAME="$test"

        RunSplice
    done

    cp -f --backup=numbered $SPLICE_LOG $SPLICE_LOG

    CheckFailure
}

CheckFailure() {
    if grep -q SPLICE_TEST_ERROR $SPLICE_LOG
    then
        echo '=================='
        echo '=====  FAIL  ====='
        echo '=================='
        return 1
    fi
    return 0
}

############################################################################
#
# RunSplice
#

RunSplice() {
    # Start splice with fresh files
    rm -rf $PLAY_DIR
    mkdir $PLAY_DIR
    cp $TEST_DIR/files/* $PLAY_DIR

    rm -rf $RESULT_DIR
    mkdir $RESULT_DIR

    if ((rflag))
    then
        RUN_TEST="-c RunTheSpliceTest"
    fi
    SPLICE_INIT='-c Splice9DevInit'

    # Don't abort if splice returns an error code.
    set +e

    #gvim -f -u $TEST_DIR/vimrc -U NONE \
    #gvim -f -u NONE -U $TEST_DIR/vimrc \
    #/junk/test_install/vim/bin/gvim -f -u DEFAULTS -U $TEST_DIR/vimrc \
    #/junk/test_install/vim/bin/vim -u DEFAULTS -U NONE \
    #gvim -f -u DEFAULTS -U NONE \

    $GVIM_CMD -f -u DEFAULTS -U $TEST_DIR/vimrc \
        -c "source $TEST_DIR/vimrc" \
        -c "runtime plugin/splice.vim" \
        $PLAY_DIR/f00-orig.txt \
        $PLAY_DIR/f00-one.txt \
        $PLAY_DIR/f00-two.txt \
        $PLAY_DIR/f00-result.txt \
        $SPLICE_INIT \
        $RUN_TEST
    set -e
}

Main
