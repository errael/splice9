vim9script

import './tables.vim'
const cmd2file = tables.cmd2file

var dump_xform = false
var dump_results = false

#
# This file generates/contains tables enumerating file select tranformations,
# generated by '-o', '-r', '-1', '-2' commands for grid, loupe, path modes;
# each of these has a relatively small number of cases. Compare mode, with
# it's 48 cases, is handled in comp_xform.vim
#
# Grid mode has a special consideration because of layout dependencies.
#
# For each mode-layout there is a list that has the initial state and command.
#       mode_layout_xform: list<list<any>>   - possible transitions
# An item looks like: [focus, cmd, curren_contents...]
# Where focus is winnr and cmd is like '-o', '-r', '-1', '-2'
# and current_contents is an item per window; loupe only has one window,
# path has three windows and so forth.

var files = ['orig', 'one', 'two', 'result']
var commands = ['-o', '-1', '-2', '-r']

#
# Loupe mode shows only one file. Any command displays the indicated file.
# focus is always winnr 2.
#       var [focus: number, cmd: string, file: string]
#       [2, '-1', 'result']
#

def GenLoupXform(): list<list<any>>
    var ret: list<list<any>>
    for file in files
        for cmd in commands
            ret->add([2, cmd, file])
        endfor
    endfor
    return ret
enddef

export const loup_xform: list<list<any>> = GenLoupXform()
if dump_xform
    echo '=== loup_xform'
    echo loup_xform->join("\n")
endif

# Loupe xform results
#       var [focus: number, file: string]
# focus is always 2.

def GenLoupXformResults(): dict<list<any>>
    var ret: dict<list<any>>
    for key_as_list in loup_xform
        var [focus, cmd, file] = key_as_list
        var key = string(key_as_list)
        ret[key] = [focus, cmd2file[cmd]]
    endfor
    return ret
enddef

export const loup_xform_results: dict<list<any>> = GenLoupXformResults()
if dump_results
    echo '=== loup_xform_results'
    loup_xform_results->foreach((k, v) => {
        echo printf("%-20s %s", k, v)
    })
endif

######################################################################

#
# Path mode shows three files, left and right are fixed to 'orig' and 'result'.
#       var [focus: number, cmd: string, left: string, middle: string, right: string]
#       [2, '-2', 'orig', 'one', 'result']
#

def GenPathXform(): list<list<any>>
    var ret: list<list<any>>
    for file in ['one', 'two']
        for cmd in commands
            for focus in range(2, 4)
                ret->add([focus, cmd, 'orig', file, 'result'])
            endfor
        endfor
    endfor
    return ret
enddef

export const path_xform: list<list<any>> = GenPathXform()
if dump_xform
    echo '=== path_xform'
    echo path_xform->join("\n")
endif

# Path xform results
#       var [focus: number, left: string, middle: string, right: string]

def GenPathXformResults(): dict<list<any>>
    var ret: dict<list<any>>
    for key_as_list in path_xform
        var [focus, cmd, left, middle, right] = key_as_list
        var key = string(key_as_list)
        if cmd == '-o' 
            focus = 2
        elseif cmd == '-r'
            focus = 4
        else
            middle = cmd2file[cmd]
            focus = 3
        endif
        ret[key] = [focus, left, middle, right]
    endfor
    return ret
enddef

export const path_xform_results: dict<list<any>> = GenPathXformResults()
if dump_results
    echo '=== path_xform_results'
    path_xform_results->foreach((k, v) => {
        echo printf("%-36s %s", k, v)
    })
endif

######################################################################

def GenGrid0Xform(): list<list<any>>
    var ret: list<list<any>>
    commands->foreach((idx, cmd) => {
        for focus in range(2, 5)
            ret->add(flattennew([focus, cmd, files]))
        endfor
    })
    return ret
enddef

export const grid0_xform: list<list<any>> = GenGrid0Xform()
if dump_xform
    echo '=== grid0_xform'
    echo grid0_xform->join("\n")
endif

if dump_results
    echo '=== grid0_xform_results'
endif
def GenGrid0XformResults(): dict<list<any>>
    var ret: dict<list<any>>
    for key_as_list in grid0_xform
        var [focus, cmd; rest] = key_as_list
        var key = string(key_as_list)
        ret[key] = flattennew([commands->index(cmd) + 2, files])
        if dump_results
            echo printf("%-20s %s", key, ret[key])
        endif
    endfor
    return ret
enddef

export const grid0_xform_results: dict<list<any>> = GenGrid0XformResults()
#grid0_xform_results->foreach((k, v) => {
#    echo printf("%-20s %s", k, v)
#})

######################################################################

def GenGrid1Xform(): list<list<any>>
    var ret: list<list<any>>
    commands->foreach((idx, cmd) => {
        if cmd == '-o'
            return
        endif
        for focus in range(2, 4)
            ret->add(flattennew([focus, cmd, 'one', 'result', 'two']))
        endfor
    })
    return ret
enddef

export const grid1_xform: list<list<any>> = GenGrid1Xform()
if dump_xform
    echo '=== grid1_xform'
    echo grid1_xform->join("\n")
endif

if dump_results
    echo '=== grid1_xform_results'
endif
def GenGrid1XformResults(): dict<list<any>>
    var ret: dict<list<any>>
    var grid1_cmds = ['-1', '-r', '-2']
    for key_as_list in grid1_xform
        var [focus, cmd; rest] = key_as_list
        var key = string(key_as_list)
        ret[key] = flattennew([grid1_cmds->index(cmd) + 2, 'one', 'result', 'two'])
        if dump_results
            echo printf("%-20s %s", key, ret[key])
        endif
    endfor
    return ret
enddef

export const grid1_xform_results: dict<list<any>> = GenGrid1XformResults()
#grid1_xform_results->foreach((k, v) => {
#    echo printf("%-20s %s", k, v)
#})



